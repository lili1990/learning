<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/tx 
                        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
    <tx:annotation-driven />


    <bean id="dataSource" class="app.datasource.DataSourceConfigure"
        destroy-method="close">
    </bean>


    <!-- 配置jdbcTemplate -->
     <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
            <property name="dataSource" ref="dataSource"></property>
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!--
       Spring中常用事务类型：
       PROPAGATION_REQUIRED 支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。
       PROPAGATION_SUPPORTS 支持当前事务，如果当前没有事务，就以非事务方式执行。
       PROPAGATION_MANDATORY 支持当前事务，如果当前没有事务，就抛出异常。
       PROPAGATION_REQUIRES_NEW 新建事务，如果当前存在事务，把当前事务挂起。
       PROPAGATION_NOT_SUPPORTED 以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
       PROPAGATION_NEVER 以非事务方式执行，如果当前存在事务，则抛出异常。
       PROPAGATION_NESTED 如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与PROPAGATION_REQUIRED类似的操作。
    -->


    <!-- 事务代理、每个Bean都有一个代理-->
    <bean  class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
        <property name="transactionManager" ref="transactionManager"></property>
        <property name="transactionAttributes">
            <props>
                <prop key="*">PROPAGATION_REQUIRED</prop>
            </props>
        </property>
        <property name="proxyInterfaces">
        <!--接口代理-->
            <value>app.service.UserService</value>
        </property>
        <property name="target" >
                <bean class="app.service.impl.UserServiceImpl"></bean>
        </property>
    </bean>

    <!-- 事务代理、所有Bean共享一个代理基类
    <bean id="transactionBase" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" abstract="true">
        <property name="transactionManager" ref="transactionManager"></property>
        <property name="transactionAttributes">
            <props>
                <prop key="*">PROPAGATION_REQUIRED</prop>
            </props>
        </property>
    </bean>

    <bean id="userService" parent="transactionBase" >
        <property name="target">
            <bean class="app.service.impl.UserServiceImpl"/>
        </property>
    </bean>

    -->



</beans>